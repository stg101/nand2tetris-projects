// function Main.fibonacci 0
// push argument 0
@ARG //    0
D=M //    1
@0 //    2
A=D+A //    3
D=M //    4
@SP //    5
A=M //    6
M=D //    7
@SP //    8
M=M+1 //    9
// push constant 2
@2 //    10
D=A //    11
@SP //    12
A=M //    13
M=D //    14
@SP //    15
M=M+1 //    16
// lt
@SP //    17
M=M-1 //    18
A=M //    19
D=M //    20
@SP //    21
M=M-1 //    22
A=M //    23
D=M-D //    24
@32 //    25
D;JLT //    26
@SP //    27
A=M //    28
M=0 //    29
@35 //    30
0;JMP //    31
@SP //    32
A=M //    33
M=-1 //    34
@SP //    35
M=M+1 //    36
// if-goto IF_TRUE
@SP //    37
M=M-1 //    38
A=M //    39
D=M //    40
@IF_TRUE //    41
D;JNE //    42
// goto IF_FALSE
@IF_FALSE //    43
0;JMP //    44
// label IF_TRUE
(IF_TRUE) //    45
// push argument 0
@ARG //    46
D=M //    47
@0 //    48
A=D+A //    49
D=M //    50
@SP //    51
A=M //    52
M=D //    53
@SP //    54
M=M+1 //    55
// return
@LCL //    56
D=M //    57
@endFrame //    58
M=D //    59
@5 //    60
D=A //    61
@endFrame //    62
D=M-D //    63
A=D //    64
D=M //    65
@retAddr //    66
M=D //    67
@ARG //    68
D=M //    69
@0 //    70
D=D+A //    71
@addr //    72
M=D //    73
@SP //    74
A=M-1 //    75
D=M //    76
@addr //    77
A=M //    78
M=D  //    79
@SP //    80
M=M-1 //    81
@1 //    82
D=A //    83
@ARG //    84
D=D+M //    85
@SP //    86
M=D //    87
@1 //    88
D=A //    89
@endFrame //    90
D=M-D //    91
A=D //    92
D=M //    93
@THAT //    94
M=D //    95
@2 //    96
D=A //    97
@endFrame //    98
D=M-D //    99
A=D //    100
D=M //    101
@THIS //    102
M=D //    103
@3 //    104
D=A //    105
@endFrame //    106
D=M-D //    107
A=D //    108
D=M //    109
@ARG //    110
M=D //    111
@4 //    112
D=A //    113
@endFrame //    114
D=M-D //    115
A=D //    116
D=M //    117
@LCL //    118
M=D //    119
@retAddr //    120
A=M //    121
0;JMP //    122
// label IF_FALSE
(IF_FALSE) //    123
// push argument 0
@ARG //    124
D=M //    125
@0 //    126
A=D+A //    127
D=M //    128
@SP //    129
A=M //    130
M=D //    131
@SP //    132
M=M+1 //    133
// push constant 2
@2 //    134
D=A //    135
@SP //    136
A=M //    137
M=D //    138
@SP //    139
M=M+1 //    140
// sub
@SP //    141
M=M-1 //    142
A=M //    143
D=M //    144
@SP //    145
M=M-1 //    146
A=M //    147
M=M-D //    148
@SP //    149
M=M+1 //    150
// call Main.fibonacci 1
// push argument 0
@ARG //    151
D=M //    152
@0 //    153
A=D+A //    154
D=M //    155
@SP //    156
A=M //    157
M=D //    158
@SP //    159
M=M+1 //    160
// push constant 1
@1 //    161
D=A //    162
@SP //    163
A=M //    164
M=D //    165
@SP //    166
M=M+1 //    167
// sub
@SP //    168
M=M-1 //    169
A=M //    170
D=M //    171
@SP //    172
M=M-1 //    173
A=M //    174
M=M-D //    175
@SP //    176
M=M+1 //    177
// call Main.fibonacci 1
// add
@SP //    178
M=M-1 //    179
A=M //    180
D=M //    181
@SP //    182
M=M-1 //    183
A=M //    184
M=D+M //    185
@SP //    186
M=M+1 //    187
// return
@LCL //    188
D=M //    189
@endFrame //    190
M=D //    191
@5 //    192
D=A //    193
@endFrame //    194
D=M-D //    195
A=D //    196
D=M //    197
@retAddr //    198
M=D //    199
@ARG //    200
D=M //    201
@0 //    202
D=D+A //    203
@addr //    204
M=D //    205
@SP //    206
A=M-1 //    207
D=M //    208
@addr //    209
A=M //    210
M=D  //    211
@SP //    212
M=M-1 //    213
@1 //    214
D=A //    215
@ARG //    216
D=D+M //    217
@SP //    218
M=D //    219
@1 //    220
D=A //    221
@endFrame //    222
D=M-D //    223
A=D //    224
D=M //    225
@THAT //    226
M=D //    227
@2 //    228
D=A //    229
@endFrame //    230
D=M-D //    231
A=D //    232
D=M //    233
@THIS //    234
M=D //    235
@3 //    236
D=A //    237
@endFrame //    238
D=M-D //    239
A=D //    240
D=M //    241
@ARG //    242
M=D //    243
@4 //    244
D=A //    245
@endFrame //    246
D=M-D //    247
A=D //    248
D=M //    249
@LCL //    250
M=D //    251
@retAddr //    252
A=M //    253
0;JMP //    254
// function Sys.init 0
// push constant 4
@4 //    255
D=A //    256
@SP //    257
A=M //    258
M=D //    259
@SP //    260
M=M+1 //    261
// call Main.fibonacci 1
// label WHILE
(WHILE) //    262
// goto WHILE
@WHILE //    263
0;JMP //    264
