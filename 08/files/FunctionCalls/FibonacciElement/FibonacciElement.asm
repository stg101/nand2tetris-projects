// function Main.fibonacci 0
(Main.Main.fibonacci) //    0
// push argument 0
@ARG //    1
D=M //    2
@0 //    3
A=D+A //    4
D=M //    5
@SP //    6
A=M //    7
M=D //    8
@SP //    9
M=M+1 //    10
// push constant 2
@2 //    11
D=A //    12
@SP //    13
A=M //    14
M=D //    15
@SP //    16
M=M+1 //    17
// lt
@SP //    18
M=M-1 //    19
A=M //    20
D=M //    21
@SP //    22
M=M-1 //    23
A=M //    24
D=M-D //    25
@33 //    26
D;JLT //    27
@SP //    28
A=M //    29
M=0 //    30
@36 //    31
0;JMP //    32
@SP //    33
A=M //    34
M=-1 //    35
@SP //    36
M=M+1 //    37
// if-goto IF_TRUE
@SP //    38
M=M-1 //    39
A=M //    40
D=M //    41
@IF_TRUE //    42
D;JNE //    43
// goto IF_FALSE
@IF_FALSE //    44
0;JMP //    45
// label IF_TRUE
(IF_TRUE) //    46
// push argument 0
@ARG //    47
D=M //    48
@0 //    49
A=D+A //    50
D=M //    51
@SP //    52
A=M //    53
M=D //    54
@SP //    55
M=M+1 //    56
// return
@LCL //    57
D=M //    58
@endFrame //    59
M=D //    60
@5 //    61
D=A //    62
@endFrame //    63
D=M-D //    64
A=D //    65
D=M //    66
@retAddr //    67
M=D //    68
@ARG //    69
D=M //    70
@0 //    71
D=D+A //    72
@addr //    73
M=D //    74
@SP //    75
A=M-1 //    76
D=M //    77
@addr //    78
A=M //    79
M=D  //    80
@SP //    81
M=M-1 //    82
@1 //    83
D=A //    84
@ARG //    85
D=D+M //    86
@SP //    87
M=D //    88
@1 //    89
D=A //    90
@endFrame //    91
D=M-D //    92
A=D //    93
D=M //    94
@THAT //    95
M=D //    96
@2 //    97
D=A //    98
@endFrame //    99
D=M-D //    100
A=D //    101
D=M //    102
@THIS //    103
M=D //    104
@3 //    105
D=A //    106
@endFrame //    107
D=M-D //    108
A=D //    109
D=M //    110
@ARG //    111
M=D //    112
@4 //    113
D=A //    114
@endFrame //    115
D=M-D //    116
A=D //    117
D=M //    118
@LCL //    119
M=D //    120
@retAddr //    121
A=M //    122
0;JMP //    123
// label IF_FALSE
(IF_FALSE) //    124
// push argument 0
@ARG //    125
D=M //    126
@0 //    127
A=D+A //    128
D=M //    129
@SP //    130
A=M //    131
M=D //    132
@SP //    133
M=M+1 //    134
// push constant 2
@2 //    135
D=A //    136
@SP //    137
A=M //    138
M=D //    139
@SP //    140
M=M+1 //    141
// sub
@SP //    142
M=M-1 //    143
A=M //    144
D=M //    145
@SP //    146
M=M-1 //    147
A=M //    148
M=M-D //    149
@SP //    150
M=M+1 //    151
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.0 //    152
D=M //    153
@SP //    154
A=M //    155
M=D //    156
@SP //    157
M=M+1 //    158
@LCL //    159
D=M //    160
@SP //    161
A=M //    162
M=D //    163
@SP //    164
M=M+1 //    165
@ARG //    166
D=M //    167
@SP //    168
A=M //    169
M=D //    170
@SP //    171
M=M+1 //    172
@THIS //    173
D=M //    174
@SP //    175
A=M //    176
M=D //    177
@SP //    178
M=M+1 //    179
@THAT //    180
D=M //    181
@SP //    182
A=M //    183
M=D //    184
@SP //    185
M=M+1 //    186
@5 //    187
D=A //    188
@SP //    189
D=M-D //    190
@temp_diff //    191
M=D //    192
@1 //    193
D=A //    194
@temp_diff //    195
D=M-D //    196
@ARG //    197
M=D //    198
@SP //    199
D=M //    200
@LCL //    201
M=D //    202
@Main.Main.fibonacci //    203
0;JMP //    204
(Main.Main.fibonacci$ret.0) //    205
// push argument 0
@ARG //    206
D=M //    207
@0 //    208
A=D+A //    209
D=M //    210
@SP //    211
A=M //    212
M=D //    213
@SP //    214
M=M+1 //    215
// push constant 1
@1 //    216
D=A //    217
@SP //    218
A=M //    219
M=D //    220
@SP //    221
M=M+1 //    222
// sub
@SP //    223
M=M-1 //    224
A=M //    225
D=M //    226
@SP //    227
M=M-1 //    228
A=M //    229
M=M-D //    230
@SP //    231
M=M+1 //    232
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.1 //    233
D=M //    234
@SP //    235
A=M //    236
M=D //    237
@SP //    238
M=M+1 //    239
@LCL //    240
D=M //    241
@SP //    242
A=M //    243
M=D //    244
@SP //    245
M=M+1 //    246
@ARG //    247
D=M //    248
@SP //    249
A=M //    250
M=D //    251
@SP //    252
M=M+1 //    253
@THIS //    254
D=M //    255
@SP //    256
A=M //    257
M=D //    258
@SP //    259
M=M+1 //    260
@THAT //    261
D=M //    262
@SP //    263
A=M //    264
M=D //    265
@SP //    266
M=M+1 //    267
@5 //    268
D=A //    269
@SP //    270
D=M-D //    271
@temp_diff //    272
M=D //    273
@1 //    274
D=A //    275
@temp_diff //    276
D=M-D //    277
@ARG //    278
M=D //    279
@SP //    280
D=M //    281
@LCL //    282
M=D //    283
@Main.Main.fibonacci //    284
0;JMP //    285
(Main.Main.fibonacci$ret.1) //    286
// add
@SP //    287
M=M-1 //    288
A=M //    289
D=M //    290
@SP //    291
M=M-1 //    292
A=M //    293
M=D+M //    294
@SP //    295
M=M+1 //    296
// return
@LCL //    297
D=M //    298
@endFrame //    299
M=D //    300
@5 //    301
D=A //    302
@endFrame //    303
D=M-D //    304
A=D //    305
D=M //    306
@retAddr //    307
M=D //    308
@ARG //    309
D=M //    310
@0 //    311
D=D+A //    312
@addr //    313
M=D //    314
@SP //    315
A=M-1 //    316
D=M //    317
@addr //    318
A=M //    319
M=D  //    320
@SP //    321
M=M-1 //    322
@1 //    323
D=A //    324
@ARG //    325
D=D+M //    326
@SP //    327
M=D //    328
@1 //    329
D=A //    330
@endFrame //    331
D=M-D //    332
A=D //    333
D=M //    334
@THAT //    335
M=D //    336
@2 //    337
D=A //    338
@endFrame //    339
D=M-D //    340
A=D //    341
D=M //    342
@THIS //    343
M=D //    344
@3 //    345
D=A //    346
@endFrame //    347
D=M-D //    348
A=D //    349
D=M //    350
@ARG //    351
M=D //    352
@4 //    353
D=A //    354
@endFrame //    355
D=M-D //    356
A=D //    357
D=M //    358
@LCL //    359
M=D //    360
@retAddr //    361
A=M //    362
0;JMP //    363
// function Sys.init 0
(Sys.Sys.init) //    364
// push constant 4
@4 //    365
D=A //    366
@SP //    367
A=M //    368
M=D //    369
@SP //    370
M=M+1 //    371
// call Main.fibonacci 1
@Sys.Main.fibonacci$ret.2 //    372
D=M //    373
@SP //    374
A=M //    375
M=D //    376
@SP //    377
M=M+1 //    378
@LCL //    379
D=M //    380
@SP //    381
A=M //    382
M=D //    383
@SP //    384
M=M+1 //    385
@ARG //    386
D=M //    387
@SP //    388
A=M //    389
M=D //    390
@SP //    391
M=M+1 //    392
@THIS //    393
D=M //    394
@SP //    395
A=M //    396
M=D //    397
@SP //    398
M=M+1 //    399
@THAT //    400
D=M //    401
@SP //    402
A=M //    403
M=D //    404
@SP //    405
M=M+1 //    406
@5 //    407
D=A //    408
@SP //    409
D=M-D //    410
@temp_diff //    411
M=D //    412
@1 //    413
D=A //    414
@temp_diff //    415
D=M-D //    416
@ARG //    417
M=D //    418
@SP //    419
D=M //    420
@LCL //    421
M=D //    422
@Sys.Main.fibonacci //    423
0;JMP //    424
(Sys.Main.fibonacci$ret.2) //    425
// label WHILE
(WHILE) //    426
// goto WHILE
@WHILE //    427
0;JMP //    428
