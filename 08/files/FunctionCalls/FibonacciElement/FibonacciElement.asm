// function Sys.init 0
(Sys.Sys.init) //    0
// push constant 4
@4 //    1
D=A //    2
@SP //    3
A=M //    4
M=D //    5
@SP //    6
M=M+1 //    7
// call Main.fibonacci 1
@Sys.Main.fibonacci$ret.0 //    8
D=M //    9
@SP //    10
A=M //    11
M=D //    12
@SP //    13
M=M+1 //    14
@LCL //    15
D=M //    16
@SP //    17
A=M //    18
M=D //    19
@SP //    20
M=M+1 //    21
@ARG //    22
D=M //    23
@SP //    24
A=M //    25
M=D //    26
@SP //    27
M=M+1 //    28
@THIS //    29
D=M //    30
@SP //    31
A=M //    32
M=D //    33
@SP //    34
M=M+1 //    35
@THAT //    36
D=M //    37
@SP //    38
A=M //    39
M=D //    40
@SP //    41
M=M+1 //    42
@5 //    43
D=A //    44
@SP //    45
D=M-D //    46
@temp_diff //    47
M=D //    48
@1 //    49
D=A //    50
@temp_diff //    51
D=M-D //    52
@ARG //    53
M=D //    54
@SP //    55
D=M //    56
@LCL //    57
M=D //    58
@Sys.Main.fibonacci //    59
0;JMP //    60
(Sys.Main.fibonacci$ret.0) //    61
// label WHILE
(WHILE) //    62
// goto WHILE
@WHILE //    63
0;JMP //    64
// function Main.fibonacci 0
(Main.Main.fibonacci) //    65
// push argument 0
@ARG //    66
D=M //    67
@0 //    68
A=D+A //    69
D=M //    70
@SP //    71
A=M //    72
M=D //    73
@SP //    74
M=M+1 //    75
// push constant 2
@2 //    76
D=A //    77
@SP //    78
A=M //    79
M=D //    80
@SP //    81
M=M+1 //    82
// lt
@SP //    83
M=M-1 //    84
A=M //    85
D=M //    86
@SP //    87
M=M-1 //    88
A=M //    89
D=M-D //    90
@98 //    91
D;JLT //    92
@SP //    93
A=M //    94
M=0 //    95
@101 //    96
0;JMP //    97
@SP //    98
A=M //    99
M=-1 //    100
@SP //    101
M=M+1 //    102
// if-goto IF_TRUE
@SP //    103
M=M-1 //    104
A=M //    105
D=M //    106
@IF_TRUE //    107
D;JNE //    108
// goto IF_FALSE
@IF_FALSE //    109
0;JMP //    110
// label IF_TRUE
(IF_TRUE) //    111
// push argument 0
@ARG //    112
D=M //    113
@0 //    114
A=D+A //    115
D=M //    116
@SP //    117
A=M //    118
M=D //    119
@SP //    120
M=M+1 //    121
// return
@LCL //    122
D=M //    123
@endFrame //    124
M=D //    125
@5 //    126
D=A //    127
@endFrame //    128
D=M-D //    129
A=D //    130
D=M //    131
@retAddr //    132
M=D //    133
@ARG //    134
D=M //    135
@0 //    136
D=D+A //    137
@addr //    138
M=D //    139
@SP //    140
A=M-1 //    141
D=M //    142
@addr //    143
A=M //    144
M=D  //    145
@SP //    146
M=M-1 //    147
@1 //    148
D=A //    149
@ARG //    150
D=D+M //    151
@SP //    152
M=D //    153
@1 //    154
D=A //    155
@endFrame //    156
D=M-D //    157
A=D //    158
D=M //    159
@THAT //    160
M=D //    161
@2 //    162
D=A //    163
@endFrame //    164
D=M-D //    165
A=D //    166
D=M //    167
@THIS //    168
M=D //    169
@3 //    170
D=A //    171
@endFrame //    172
D=M-D //    173
A=D //    174
D=M //    175
@ARG //    176
M=D //    177
@4 //    178
D=A //    179
@endFrame //    180
D=M-D //    181
A=D //    182
D=M //    183
@LCL //    184
M=D //    185
@retAddr //    186
A=M //    187
0;JMP //    188
// label IF_FALSE
(IF_FALSE) //    189
// push argument 0
@ARG //    190
D=M //    191
@0 //    192
A=D+A //    193
D=M //    194
@SP //    195
A=M //    196
M=D //    197
@SP //    198
M=M+1 //    199
// push constant 2
@2 //    200
D=A //    201
@SP //    202
A=M //    203
M=D //    204
@SP //    205
M=M+1 //    206
// sub
@SP //    207
M=M-1 //    208
A=M //    209
D=M //    210
@SP //    211
M=M-1 //    212
A=M //    213
M=M-D //    214
@SP //    215
M=M+1 //    216
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.1 //    217
D=M //    218
@SP //    219
A=M //    220
M=D //    221
@SP //    222
M=M+1 //    223
@LCL //    224
D=M //    225
@SP //    226
A=M //    227
M=D //    228
@SP //    229
M=M+1 //    230
@ARG //    231
D=M //    232
@SP //    233
A=M //    234
M=D //    235
@SP //    236
M=M+1 //    237
@THIS //    238
D=M //    239
@SP //    240
A=M //    241
M=D //    242
@SP //    243
M=M+1 //    244
@THAT //    245
D=M //    246
@SP //    247
A=M //    248
M=D //    249
@SP //    250
M=M+1 //    251
@5 //    252
D=A //    253
@SP //    254
D=M-D //    255
@temp_diff //    256
M=D //    257
@1 //    258
D=A //    259
@temp_diff //    260
D=M-D //    261
@ARG //    262
M=D //    263
@SP //    264
D=M //    265
@LCL //    266
M=D //    267
@Main.Main.fibonacci //    268
0;JMP //    269
(Main.Main.fibonacci$ret.1) //    270
// push argument 0
@ARG //    271
D=M //    272
@0 //    273
A=D+A //    274
D=M //    275
@SP //    276
A=M //    277
M=D //    278
@SP //    279
M=M+1 //    280
// push constant 1
@1 //    281
D=A //    282
@SP //    283
A=M //    284
M=D //    285
@SP //    286
M=M+1 //    287
// sub
@SP //    288
M=M-1 //    289
A=M //    290
D=M //    291
@SP //    292
M=M-1 //    293
A=M //    294
M=M-D //    295
@SP //    296
M=M+1 //    297
// call Main.fibonacci 1
@Main.Main.fibonacci$ret.2 //    298
D=M //    299
@SP //    300
A=M //    301
M=D //    302
@SP //    303
M=M+1 //    304
@LCL //    305
D=M //    306
@SP //    307
A=M //    308
M=D //    309
@SP //    310
M=M+1 //    311
@ARG //    312
D=M //    313
@SP //    314
A=M //    315
M=D //    316
@SP //    317
M=M+1 //    318
@THIS //    319
D=M //    320
@SP //    321
A=M //    322
M=D //    323
@SP //    324
M=M+1 //    325
@THAT //    326
D=M //    327
@SP //    328
A=M //    329
M=D //    330
@SP //    331
M=M+1 //    332
@5 //    333
D=A //    334
@SP //    335
D=M-D //    336
@temp_diff //    337
M=D //    338
@1 //    339
D=A //    340
@temp_diff //    341
D=M-D //    342
@ARG //    343
M=D //    344
@SP //    345
D=M //    346
@LCL //    347
M=D //    348
@Main.Main.fibonacci //    349
0;JMP //    350
(Main.Main.fibonacci$ret.2) //    351
// add
@SP //    352
M=M-1 //    353
A=M //    354
D=M //    355
@SP //    356
M=M-1 //    357
A=M //    358
M=D+M //    359
@SP //    360
M=M+1 //    361
// return
@LCL //    362
D=M //    363
@endFrame //    364
M=D //    365
@5 //    366
D=A //    367
@endFrame //    368
D=M-D //    369
A=D //    370
D=M //    371
@retAddr //    372
M=D //    373
@ARG //    374
D=M //    375
@0 //    376
D=D+A //    377
@addr //    378
M=D //    379
@SP //    380
A=M-1 //    381
D=M //    382
@addr //    383
A=M //    384
M=D  //    385
@SP //    386
M=M-1 //    387
@1 //    388
D=A //    389
@ARG //    390
D=D+M //    391
@SP //    392
M=D //    393
@1 //    394
D=A //    395
@endFrame //    396
D=M-D //    397
A=D //    398
D=M //    399
@THAT //    400
M=D //    401
@2 //    402
D=A //    403
@endFrame //    404
D=M-D //    405
A=D //    406
D=M //    407
@THIS //    408
M=D //    409
@3 //    410
D=A //    411
@endFrame //    412
D=M-D //    413
A=D //    414
D=M //    415
@ARG //    416
M=D //    417
@4 //    418
D=A //    419
@endFrame //    420
D=M-D //    421
A=D //    422
D=M //    423
@LCL //    424
M=D //    425
@retAddr //    426
A=M //    427
0;JMP //    428
