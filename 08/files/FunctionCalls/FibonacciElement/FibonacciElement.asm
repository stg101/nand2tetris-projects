// BOOTSTRAP CODE
@256 //    0
D=A //    1
@SP //    2
M=D //    3
@256 //    4
D=A //    5
@LCL //    6
M=D //    7
@256 //    8
D=A //    9
@ARG //    10
M=D //    11
@Sys.init$ret.0 //    12
D=M //    13
@SP //    14
A=M //    15
M=D //    16
@SP //    17
M=M+1 //    18
@LCL //    19
D=M //    20
@SP //    21
A=M //    22
M=D //    23
@SP //    24
M=M+1 //    25
@ARG //    26
D=M //    27
@SP //    28
A=M //    29
M=D //    30
@SP //    31
M=M+1 //    32
@THIS //    33
D=M //    34
@SP //    35
A=M //    36
M=D //    37
@SP //    38
M=M+1 //    39
@THAT //    40
D=M //    41
@SP //    42
A=M //    43
M=D //    44
@SP //    45
M=M+1 //    46
@5 //    47
D=A //    48
@SP //    49
D=M-D //    50
@temp_diff //    51
M=D //    52
@0 //    53
D=A //    54
@temp_diff //    55
D=M-D //    56
@ARG //    57
M=D //    58
@SP //    59
D=M //    60
@LCL //    61
M=D //    62
@Sys.init //    63
0;JMP //    64
(Sys.init$ret.0)
// function Sys.init 0
(Sys.init)
// push constant 4
@4 //    65
D=A //    66
@SP //    67
A=M //    68
M=D //    69
@SP //    70
M=M+1 //    71
// call Main.fibonacci 1
@Main.fibonacci$ret.0 //    72
D=M //    73
@SP //    74
A=M //    75
M=D //    76
@SP //    77
M=M+1 //    78
@LCL //    79
D=M //    80
@SP //    81
A=M //    82
M=D //    83
@SP //    84
M=M+1 //    85
@ARG //    86
D=M //    87
@SP //    88
A=M //    89
M=D //    90
@SP //    91
M=M+1 //    92
@THIS //    93
D=M //    94
@SP //    95
A=M //    96
M=D //    97
@SP //    98
M=M+1 //    99
@THAT //    100
D=M //    101
@SP //    102
A=M //    103
M=D //    104
@SP //    105
M=M+1 //    106
@5 //    107
D=A //    108
@SP //    109
D=M-D //    110
@temp_diff //    111
M=D //    112
@1 //    113
D=A //    114
@temp_diff //    115
D=M-D //    116
@ARG //    117
M=D //    118
@SP //    119
D=M //    120
@LCL //    121
M=D //    122
@Main.fibonacci //    123
0;JMP //    124
(Main.fibonacci$ret.0)
// label WHILE
(WHILE)
// goto WHILE
@WHILE //    125
0;JMP //    126
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@ARG //    127
D=M //    128
@0 //    129
A=D+A //    130
D=M //    131
@SP //    132
A=M //    133
M=D //    134
@SP //    135
M=M+1 //    136
// push constant 2
@2 //    137
D=A //    138
@SP //    139
A=M //    140
M=D //    141
@SP //    142
M=M+1 //    143
// lt
@SP //    144
M=M-1 //    145
A=M //    146
D=M //    147
@SP //    148
M=M-1 //    149
A=M //    150
D=M-D //    151
@159 //    152
D;JLT //    153
@SP //    154
A=M //    155
M=0 //    156
@162 //    157
0;JMP //    158
@SP //    159
A=M //    160
M=-1 //    161
@SP //    162
M=M+1 //    163
// if-goto IF_TRUE
@SP //    164
M=M-1 //    165
A=M //    166
D=M //    167
@IF_TRUE //    168
D;JNE //    169
// goto IF_FALSE
@IF_FALSE //    170
0;JMP //    171
// label IF_TRUE
(IF_TRUE)
// push argument 0
@ARG //    172
D=M //    173
@0 //    174
A=D+A //    175
D=M //    176
@SP //    177
A=M //    178
M=D //    179
@SP //    180
M=M+1 //    181
// return
@LCL //    182
D=M //    183
@endFrame //    184
M=D //    185
@5 //    186
D=A //    187
@endFrame //    188
D=M-D //    189
A=D //    190
D=M //    191
@retAddr //    192
M=D //    193
@ARG //    194
D=M //    195
@0 //    196
D=D+A //    197
@addr //    198
M=D //    199
@SP //    200
A=M-1 //    201
D=M //    202
@addr //    203
A=M //    204
M=D  //    205
@SP //    206
M=M-1 //    207
@1 //    208
D=A //    209
@ARG //    210
D=D+M //    211
@SP //    212
M=D //    213
@1 //    214
D=A //    215
@endFrame //    216
D=M-D //    217
A=D //    218
D=M //    219
@THAT //    220
M=D //    221
@2 //    222
D=A //    223
@endFrame //    224
D=M-D //    225
A=D //    226
D=M //    227
@THIS //    228
M=D //    229
@3 //    230
D=A //    231
@endFrame //    232
D=M-D //    233
A=D //    234
D=M //    235
@ARG //    236
M=D //    237
@4 //    238
D=A //    239
@endFrame //    240
D=M-D //    241
A=D //    242
D=M //    243
@LCL //    244
M=D //    245
@retAddr //    246
A=M //    247
0;JMP //    248
// label IF_FALSE
(IF_FALSE)
// push argument 0
@ARG //    249
D=M //    250
@0 //    251
A=D+A //    252
D=M //    253
@SP //    254
A=M //    255
M=D //    256
@SP //    257
M=M+1 //    258
// push constant 2
@2 //    259
D=A //    260
@SP //    261
A=M //    262
M=D //    263
@SP //    264
M=M+1 //    265
// sub
@SP //    266
M=M-1 //    267
A=M //    268
D=M //    269
@SP //    270
M=M-1 //    271
A=M //    272
M=M-D //    273
@SP //    274
M=M+1 //    275
// call Main.fibonacci 1
@Main.fibonacci$ret.1 //    276
D=M //    277
@SP //    278
A=M //    279
M=D //    280
@SP //    281
M=M+1 //    282
@LCL //    283
D=M //    284
@SP //    285
A=M //    286
M=D //    287
@SP //    288
M=M+1 //    289
@ARG //    290
D=M //    291
@SP //    292
A=M //    293
M=D //    294
@SP //    295
M=M+1 //    296
@THIS //    297
D=M //    298
@SP //    299
A=M //    300
M=D //    301
@SP //    302
M=M+1 //    303
@THAT //    304
D=M //    305
@SP //    306
A=M //    307
M=D //    308
@SP //    309
M=M+1 //    310
@5 //    311
D=A //    312
@SP //    313
D=M-D //    314
@temp_diff //    315
M=D //    316
@1 //    317
D=A //    318
@temp_diff //    319
D=M-D //    320
@ARG //    321
M=D //    322
@SP //    323
D=M //    324
@LCL //    325
M=D //    326
@Main.fibonacci //    327
0;JMP //    328
(Main.fibonacci$ret.1)
// push argument 0
@ARG //    329
D=M //    330
@0 //    331
A=D+A //    332
D=M //    333
@SP //    334
A=M //    335
M=D //    336
@SP //    337
M=M+1 //    338
// push constant 1
@1 //    339
D=A //    340
@SP //    341
A=M //    342
M=D //    343
@SP //    344
M=M+1 //    345
// sub
@SP //    346
M=M-1 //    347
A=M //    348
D=M //    349
@SP //    350
M=M-1 //    351
A=M //    352
M=M-D //    353
@SP //    354
M=M+1 //    355
// call Main.fibonacci 1
@Main.fibonacci$ret.2 //    356
D=M //    357
@SP //    358
A=M //    359
M=D //    360
@SP //    361
M=M+1 //    362
@LCL //    363
D=M //    364
@SP //    365
A=M //    366
M=D //    367
@SP //    368
M=M+1 //    369
@ARG //    370
D=M //    371
@SP //    372
A=M //    373
M=D //    374
@SP //    375
M=M+1 //    376
@THIS //    377
D=M //    378
@SP //    379
A=M //    380
M=D //    381
@SP //    382
M=M+1 //    383
@THAT //    384
D=M //    385
@SP //    386
A=M //    387
M=D //    388
@SP //    389
M=M+1 //    390
@5 //    391
D=A //    392
@SP //    393
D=M-D //    394
@temp_diff //    395
M=D //    396
@1 //    397
D=A //    398
@temp_diff //    399
D=M-D //    400
@ARG //    401
M=D //    402
@SP //    403
D=M //    404
@LCL //    405
M=D //    406
@Main.fibonacci //    407
0;JMP //    408
(Main.fibonacci$ret.2)
// add
@SP //    409
M=M-1 //    410
A=M //    411
D=M //    412
@SP //    413
M=M-1 //    414
A=M //    415
M=D+M //    416
@SP //    417
M=M+1 //    418
// return
@LCL //    419
D=M //    420
@endFrame //    421
M=D //    422
@5 //    423
D=A //    424
@endFrame //    425
D=M-D //    426
A=D //    427
D=M //    428
@retAddr //    429
M=D //    430
@ARG //    431
D=M //    432
@0 //    433
D=D+A //    434
@addr //    435
M=D //    436
@SP //    437
A=M-1 //    438
D=M //    439
@addr //    440
A=M //    441
M=D  //    442
@SP //    443
M=M-1 //    444
@1 //    445
D=A //    446
@ARG //    447
D=D+M //    448
@SP //    449
M=D //    450
@1 //    451
D=A //    452
@endFrame //    453
D=M-D //    454
A=D //    455
D=M //    456
@THAT //    457
M=D //    458
@2 //    459
D=A //    460
@endFrame //    461
D=M-D //    462
A=D //    463
D=M //    464
@THIS //    465
M=D //    466
@3 //    467
D=A //    468
@endFrame //    469
D=M-D //    470
A=D //    471
D=M //    472
@ARG //    473
M=D //    474
@4 //    475
D=A //    476
@endFrame //    477
D=M-D //    478
A=D //    479
D=M //    480
@LCL //    481
M=D //    482
@retAddr //    483
A=M //    484
0;JMP //    485
