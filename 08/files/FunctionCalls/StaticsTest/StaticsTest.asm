// BOOTSTRAP CODE
@256 //    0
D=A //    1
@SP //    2
M=D //    3
@256 //    4
D=A //    5
@LCL //    6
M=D //    7
@256 //    8
D=A //    9
@ARG //    10
M=D //    11
@Sys.init$ret.0 //    12
D=A //    13
@SP //    14
A=M //    15
M=D //    16
@SP //    17
M=M+1 //    18
@LCL //    19
D=M //    20
@SP //    21
A=M //    22
M=D //    23
@SP //    24
M=M+1 //    25
@ARG //    26
D=M //    27
@SP //    28
A=M //    29
M=D //    30
@SP //    31
M=M+1 //    32
@THIS //    33
D=M //    34
@SP //    35
A=M //    36
M=D //    37
@SP //    38
M=M+1 //    39
@THAT //    40
D=M //    41
@SP //    42
A=M //    43
M=D //    44
@SP //    45
M=M+1 //    46
@5 //    47
D=A //    48
@SP //    49
D=M-D //    50
@temp_diff //    51
M=D //    52
@0 //    53
D=A //    54
@temp_diff //    55
D=M-D //    56
@ARG //    57
M=D //    58
@SP //    59
D=M //    60
@LCL //    61
M=D //    62
@Sys.init //    63
0;JMP //    64
(Sys.init$ret.0)
// function Sys.init 0
(Sys.init)
// push constant 6
@6 //    65
D=A //    66
@SP //    67
A=M //    68
M=D //    69
@SP //    70
M=M+1 //    71
// push constant 8
@8 //    72
D=A //    73
@SP //    74
A=M //    75
M=D //    76
@SP //    77
M=M+1 //    78
// call Class1.set 2
@Class1.set$ret.0 //    79
D=A //    80
@SP //    81
A=M //    82
M=D //    83
@SP //    84
M=M+1 //    85
@LCL //    86
D=M //    87
@SP //    88
A=M //    89
M=D //    90
@SP //    91
M=M+1 //    92
@ARG //    93
D=M //    94
@SP //    95
A=M //    96
M=D //    97
@SP //    98
M=M+1 //    99
@THIS //    100
D=M //    101
@SP //    102
A=M //    103
M=D //    104
@SP //    105
M=M+1 //    106
@THAT //    107
D=M //    108
@SP //    109
A=M //    110
M=D //    111
@SP //    112
M=M+1 //    113
@5 //    114
D=A //    115
@SP //    116
D=M-D //    117
@temp_diff //    118
M=D //    119
@2 //    120
D=A //    121
@temp_diff //    122
D=M-D //    123
@ARG //    124
M=D //    125
@SP //    126
D=M //    127
@LCL //    128
M=D //    129
@Class1.set //    130
0;JMP //    131
(Class1.set$ret.0)
// pop temp 0
@5 //    132
D=A //    133
@0 //    134
D=D+A //    135
@addr //    136
M=D //    137
@SP //    138
A=M-1 //    139
D=M //    140
@addr //    141
A=M //    142
M=D  //    143
@SP //    144
M=M-1 //    145
// push constant 23
@23 //    146
D=A //    147
@SP //    148
A=M //    149
M=D //    150
@SP //    151
M=M+1 //    152
// push constant 15
@15 //    153
D=A //    154
@SP //    155
A=M //    156
M=D //    157
@SP //    158
M=M+1 //    159
// call Class2.set 2
@Class2.set$ret.0 //    160
D=A //    161
@SP //    162
A=M //    163
M=D //    164
@SP //    165
M=M+1 //    166
@LCL //    167
D=M //    168
@SP //    169
A=M //    170
M=D //    171
@SP //    172
M=M+1 //    173
@ARG //    174
D=M //    175
@SP //    176
A=M //    177
M=D //    178
@SP //    179
M=M+1 //    180
@THIS //    181
D=M //    182
@SP //    183
A=M //    184
M=D //    185
@SP //    186
M=M+1 //    187
@THAT //    188
D=M //    189
@SP //    190
A=M //    191
M=D //    192
@SP //    193
M=M+1 //    194
@5 //    195
D=A //    196
@SP //    197
D=M-D //    198
@temp_diff //    199
M=D //    200
@2 //    201
D=A //    202
@temp_diff //    203
D=M-D //    204
@ARG //    205
M=D //    206
@SP //    207
D=M //    208
@LCL //    209
M=D //    210
@Class2.set //    211
0;JMP //    212
(Class2.set$ret.0)
// pop temp 0
@5 //    213
D=A //    214
@0 //    215
D=D+A //    216
@addr //    217
M=D //    218
@SP //    219
A=M-1 //    220
D=M //    221
@addr //    222
A=M //    223
M=D  //    224
@SP //    225
M=M-1 //    226
// call Class1.get 0
@Class1.get$ret.0 //    227
D=A //    228
@SP //    229
A=M //    230
M=D //    231
@SP //    232
M=M+1 //    233
@LCL //    234
D=M //    235
@SP //    236
A=M //    237
M=D //    238
@SP //    239
M=M+1 //    240
@ARG //    241
D=M //    242
@SP //    243
A=M //    244
M=D //    245
@SP //    246
M=M+1 //    247
@THIS //    248
D=M //    249
@SP //    250
A=M //    251
M=D //    252
@SP //    253
M=M+1 //    254
@THAT //    255
D=M //    256
@SP //    257
A=M //    258
M=D //    259
@SP //    260
M=M+1 //    261
@5 //    262
D=A //    263
@SP //    264
D=M-D //    265
@temp_diff //    266
M=D //    267
@0 //    268
D=A //    269
@temp_diff //    270
D=M-D //    271
@ARG //    272
M=D //    273
@SP //    274
D=M //    275
@LCL //    276
M=D //    277
@Class1.get //    278
0;JMP //    279
(Class1.get$ret.0)
// call Class2.get 0
@Class2.get$ret.0 //    280
D=A //    281
@SP //    282
A=M //    283
M=D //    284
@SP //    285
M=M+1 //    286
@LCL //    287
D=M //    288
@SP //    289
A=M //    290
M=D //    291
@SP //    292
M=M+1 //    293
@ARG //    294
D=M //    295
@SP //    296
A=M //    297
M=D //    298
@SP //    299
M=M+1 //    300
@THIS //    301
D=M //    302
@SP //    303
A=M //    304
M=D //    305
@SP //    306
M=M+1 //    307
@THAT //    308
D=M //    309
@SP //    310
A=M //    311
M=D //    312
@SP //    313
M=M+1 //    314
@5 //    315
D=A //    316
@SP //    317
D=M-D //    318
@temp_diff //    319
M=D //    320
@0 //    321
D=A //    322
@temp_diff //    323
D=M-D //    324
@ARG //    325
M=D //    326
@SP //    327
D=M //    328
@LCL //    329
M=D //    330
@Class2.get //    331
0;JMP //    332
(Class2.get$ret.0)
// label WHILE
(WHILE)
// goto WHILE
@WHILE //    333
0;JMP //    334
// function Class1.set 0
(Class1.set)
// push argument 0
@ARG //    335
D=M //    336
@0 //    337
A=D+A //    338
D=M //    339
@SP //    340
A=M //    341
M=D //    342
@SP //    343
M=M+1 //    344
// pop static 0
@SP //    345
A=M-1 //    346
D=M //    347
@static.0 //    348
M=D //    349
@SP //    350
M=M-1 //    351
// push argument 1
@ARG //    352
D=M //    353
@1 //    354
A=D+A //    355
D=M //    356
@SP //    357
A=M //    358
M=D //    359
@SP //    360
M=M+1 //    361
// pop static 1
@SP //    362
A=M-1 //    363
D=M //    364
@static.1 //    365
M=D //    366
@SP //    367
M=M-1 //    368
// push constant 0
@0 //    369
D=A //    370
@SP //    371
A=M //    372
M=D //    373
@SP //    374
M=M+1 //    375
// return
@LCL //    376
D=M //    377
@endFrame //    378
M=D //    379
@5 //    380
D=A //    381
@endFrame //    382
D=M-D //    383
A=D //    384
D=M //    385
@retAddr //    386
M=D //    387
@ARG //    388
D=M //    389
@0 //    390
D=D+A //    391
@addr //    392
M=D //    393
@SP //    394
A=M-1 //    395
D=M //    396
@addr //    397
A=M //    398
M=D  //    399
@SP //    400
M=M-1 //    401
@1 //    402
D=A //    403
@ARG //    404
D=D+M //    405
@SP //    406
M=D //    407
@1 //    408
D=A //    409
@endFrame //    410
D=M-D //    411
A=D //    412
D=M //    413
@THAT //    414
M=D //    415
@2 //    416
D=A //    417
@endFrame //    418
D=M-D //    419
A=D //    420
D=M //    421
@THIS //    422
M=D //    423
@3 //    424
D=A //    425
@endFrame //    426
D=M-D //    427
A=D //    428
D=M //    429
@ARG //    430
M=D //    431
@4 //    432
D=A //    433
@endFrame //    434
D=M-D //    435
A=D //    436
D=M //    437
@LCL //    438
M=D //    439
@retAddr //    440
A=M //    441
0;JMP //    442
// function Class1.get 0
(Class1.get)
// push static 0
@static.0 //    443
D=M //    444
@SP //    445
A=M //    446
M=D //    447
@SP //    448
M=M+1 //    449
// push static 1
@static.1 //    450
D=M //    451
@SP //    452
A=M //    453
M=D //    454
@SP //    455
M=M+1 //    456
// sub
@SP //    457
M=M-1 //    458
A=M //    459
D=M //    460
@SP //    461
M=M-1 //    462
A=M //    463
M=M-D //    464
@SP //    465
M=M+1 //    466
// return
@LCL //    467
D=M //    468
@endFrame //    469
M=D //    470
@5 //    471
D=A //    472
@endFrame //    473
D=M-D //    474
A=D //    475
D=M //    476
@retAddr //    477
M=D //    478
@ARG //    479
D=M //    480
@0 //    481
D=D+A //    482
@addr //    483
M=D //    484
@SP //    485
A=M-1 //    486
D=M //    487
@addr //    488
A=M //    489
M=D  //    490
@SP //    491
M=M-1 //    492
@1 //    493
D=A //    494
@ARG //    495
D=D+M //    496
@SP //    497
M=D //    498
@1 //    499
D=A //    500
@endFrame //    501
D=M-D //    502
A=D //    503
D=M //    504
@THAT //    505
M=D //    506
@2 //    507
D=A //    508
@endFrame //    509
D=M-D //    510
A=D //    511
D=M //    512
@THIS //    513
M=D //    514
@3 //    515
D=A //    516
@endFrame //    517
D=M-D //    518
A=D //    519
D=M //    520
@ARG //    521
M=D //    522
@4 //    523
D=A //    524
@endFrame //    525
D=M-D //    526
A=D //    527
D=M //    528
@LCL //    529
M=D //    530
@retAddr //    531
A=M //    532
0;JMP //    533
// function Class2.set 0
(Class2.set)
// push argument 0
@ARG //    534
D=M //    535
@0 //    536
A=D+A //    537
D=M //    538
@SP //    539
A=M //    540
M=D //    541
@SP //    542
M=M+1 //    543
// pop static 0
@SP //    544
A=M-1 //    545
D=M //    546
@static.0 //    547
M=D //    548
@SP //    549
M=M-1 //    550
// push argument 1
@ARG //    551
D=M //    552
@1 //    553
A=D+A //    554
D=M //    555
@SP //    556
A=M //    557
M=D //    558
@SP //    559
M=M+1 //    560
// pop static 1
@SP //    561
A=M-1 //    562
D=M //    563
@static.1 //    564
M=D //    565
@SP //    566
M=M-1 //    567
// push constant 0
@0 //    568
D=A //    569
@SP //    570
A=M //    571
M=D //    572
@SP //    573
M=M+1 //    574
// return
@LCL //    575
D=M //    576
@endFrame //    577
M=D //    578
@5 //    579
D=A //    580
@endFrame //    581
D=M-D //    582
A=D //    583
D=M //    584
@retAddr //    585
M=D //    586
@ARG //    587
D=M //    588
@0 //    589
D=D+A //    590
@addr //    591
M=D //    592
@SP //    593
A=M-1 //    594
D=M //    595
@addr //    596
A=M //    597
M=D  //    598
@SP //    599
M=M-1 //    600
@1 //    601
D=A //    602
@ARG //    603
D=D+M //    604
@SP //    605
M=D //    606
@1 //    607
D=A //    608
@endFrame //    609
D=M-D //    610
A=D //    611
D=M //    612
@THAT //    613
M=D //    614
@2 //    615
D=A //    616
@endFrame //    617
D=M-D //    618
A=D //    619
D=M //    620
@THIS //    621
M=D //    622
@3 //    623
D=A //    624
@endFrame //    625
D=M-D //    626
A=D //    627
D=M //    628
@ARG //    629
M=D //    630
@4 //    631
D=A //    632
@endFrame //    633
D=M-D //    634
A=D //    635
D=M //    636
@LCL //    637
M=D //    638
@retAddr //    639
A=M //    640
0;JMP //    641
// function Class2.get 0
(Class2.get)
// push static 0
@static.0 //    642
D=M //    643
@SP //    644
A=M //    645
M=D //    646
@SP //    647
M=M+1 //    648
// push static 1
@static.1 //    649
D=M //    650
@SP //    651
A=M //    652
M=D //    653
@SP //    654
M=M+1 //    655
// sub
@SP //    656
M=M-1 //    657
A=M //    658
D=M //    659
@SP //    660
M=M-1 //    661
A=M //    662
M=M-D //    663
@SP //    664
M=M+1 //    665
// return
@LCL //    666
D=M //    667
@endFrame //    668
M=D //    669
@5 //    670
D=A //    671
@endFrame //    672
D=M-D //    673
A=D //    674
D=M //    675
@retAddr //    676
M=D //    677
@ARG //    678
D=M //    679
@0 //    680
D=D+A //    681
@addr //    682
M=D //    683
@SP //    684
A=M-1 //    685
D=M //    686
@addr //    687
A=M //    688
M=D  //    689
@SP //    690
M=M-1 //    691
@1 //    692
D=A //    693
@ARG //    694
D=D+M //    695
@SP //    696
M=D //    697
@1 //    698
D=A //    699
@endFrame //    700
D=M-D //    701
A=D //    702
D=M //    703
@THAT //    704
M=D //    705
@2 //    706
D=A //    707
@endFrame //    708
D=M-D //    709
A=D //    710
D=M //    711
@THIS //    712
M=D //    713
@3 //    714
D=A //    715
@endFrame //    716
D=M-D //    717
A=D //    718
D=M //    719
@ARG //    720
M=D //    721
@4 //    722
D=A //    723
@endFrame //    724
D=M-D //    725
A=D //    726
D=M //    727
@LCL //    728
M=D //    729
@retAddr //    730
A=M //    731
0;JMP //    732
