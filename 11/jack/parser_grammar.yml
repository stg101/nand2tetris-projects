grammar:
  keyword:
    type: token
    match_value: ['class','constructor','function','method','field','static','var','int','char','boolean','void','true','false','null','this', 'let','do','if','else','while','return']
  symbol: 
    type: token
    match_value: ['{','}','(',')','[',']','.',',',';','+','-','*','/','&','|','<','>','=','~']
  integerConstant: token
  stringConstant: token
  identifier: token
  ###
  class: "'class' className '{' classVarDec* subroutineDec* '}'"
  classVarDec: "('static' | 'field' ) type varName (',' varName)* ';'"
  type: "'int' | 'char' | 'boolean' | className"
  subroutineDec: "('constructor' | 'function' | 'method') ('void' | type) subroutineName '(' parameterList ')' subroutineBody"
  parameterList: "( (type varName) (',' type varName)*)?"
  subroutineBody: "'{' varDec* statements '}'"
  varDec: "'var' type varName (',' varName)* ';'"
  className: identifier
  subroutineName: identifier
  varName: identifier
  ###
  statements: statement*
  statement: "letStatement | ifStatement | whileStatement | doStatement | returnStatement"
  letStatement: "'let' varName ('[' expression ']')? '=' expression ';'"
  ifStatement: "'if' '(' expression ')' '{' statements '}' ( 'else' '{' statements '}' )?"
  whileStatement: "'while' '(' expression ')' '{' statements '}'"
  doStatement: "'do' subroutineCall ';'"
  returnStatement: "'return' expression? ';'"
  ###
  expression: "term (op term)*"
  # term: "integerConstant | stringConstant | keywordConstant | varName | [varName '[' expression ']'] | subroutineCall | ['(' expression ')'] | [unaryOp term]"
  term: "integerConstant | stringConstant | keywordConstant | subroutineCall | [varName '[' expression ']'] | varName |  ['(' expression ')'] | [unaryOp term]"
  subroutineCall: "[subroutineName '(' expressionList ')'] | [( className | varName) '.' subroutineName '('  expressionList ')']"
  expressionList: "(expression (',' expression)* )?"
  op: "'+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '='"
  unaryOp: "'-' | '~'"
  keywordConstant: "'true' | 'false' | 'null' | 'this'"

# use this after getting the AST
# transformations
#   subroutineName: "
#     this.values.0.name
#   "
#   subroutineCall: "
#     push asd,
#     asdasd ,
#     call $subroutineName
#   "